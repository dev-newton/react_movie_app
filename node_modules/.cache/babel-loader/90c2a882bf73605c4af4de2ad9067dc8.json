{"ast":null,"code":"import _defineProperty from \"/Users/devnewton/Desktop/react-movie/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/devnewton/Desktop/react-movie/src/components/Movie/Movie.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { API_KEY, API_URL } from \"../../config\";\nimport Navigation from \"../elements/Navigation/Navigation\";\nimport MovieInfo from \"../elements/MovieInfo/MovieInfo\";\nimport MovieInfoBar from \"../elements/MovieInfoBar/MovieInfoBar\";\nimport FourColGrid from \"../elements/FourColGrid/FourColGrid\";\nimport Actor from \"../elements/Actor/Actor\";\nimport Spinner from \"../elements/Spinner/Spinner\";\nimport \"./Movie.css\";\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      fetch(endpoint).then(result => result.json()).then(result => {\n        if (result.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            //....then fetch actors in the setstae callback function\n            const endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"/credits?api_key=\").concat(API_KEY);\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              }, () => {\n                localStorage.setItem(\"\".concat(this.props.match.params.movieId), JSON.stringify(this.state));\n              });\n            });\n          });\n        }\n      }).catch(error => console.log(\"Error:\", error));\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(\"\".concat(this.props.match.params.movieId))) {\n      const state = JSON.parse(localStorage.getItem(\"\".concat(this.props.match.params.movieId)));\n      this.setState(_objectSpread({}, state));\n    } else {\n      this.setState({\n        loading: true\n      }); // First fetch the movie\n\n      const endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"?api_key=\").concat(API_KEY, \"&language=en-US\");\n      this.fetchItems(endpoint);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.state.movie ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      movie: this.state.movie.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      movie: this.state.movie,\n      directors: this.state.directors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      time: this.state.movie.runtime,\n      budget: this.state.movie.budget,\n      revenue: this.state.movie.revenue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })) : null, this.state.actors ? React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(FourColGrid, {\n      header: \"Actors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.state.actors.map((element, i) => {\n      return React.createElement(Actor, {\n        key: i,\n        actor: element,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      });\n    }))) : null, !this.state.actors && !this.state.loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"No Movie Found\") : null, this.state.loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/Users/devnewton/Desktop/react-movie/src/components/Movie/Movie.jsx"],"names":["React","Component","API_KEY","API_URL","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","fetch","then","result","json","status_code","setState","props","match","params","movieId","crew","filter","member","job","cast","localStorage","setItem","JSON","stringify","catch","error","console","log","componentDidMount","getItem","parse","render","title","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { API_KEY, API_URL } from \"../../config\";\nimport Navigation from \"../elements/Navigation/Navigation\";\nimport MovieInfo from \"../elements/MovieInfo/MovieInfo\";\nimport MovieInfoBar from \"../elements/MovieInfoBar/MovieInfoBar\";\nimport FourColGrid from \"../elements/FourColGrid/FourColGrid\";\nimport Actor from \"../elements/Actor/Actor\";\nimport Spinner from \"../elements/Spinner/Spinner\";\nimport \"./Movie.css\";\n\nclass Movie extends Component {\n  state = {\n    movie: null,\n    actors: null,\n    directors: [],\n    loading: false\n  };\n\n  componentDidMount() {\n    if (localStorage.getItem(`${this.props.match.params.movieId}`)) {\n      const state = JSON.parse(\n        localStorage.getItem(`${this.props.match.params.movieId}`)\n      );\n      this.setState({ ...state });\n    } else {\n      this.setState({ loading: true });\n      // First fetch the movie\n      const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n\n      this.fetchItems(endpoint);\n    }\n  }\n\n  fetchItems = endpoint => {\n    fetch(endpoint)\n      .then(result => result.json())\n      .then(result => {\n        if (result.status_code) {\n          this.setState({ loading: false });\n        } else {\n          this.setState(\n            {\n              movie: result\n            },\n            () => {\n              //....then fetch actors in the setstae callback function\n              const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n              fetch(endpoint)\n                .then(result => result.json())\n                .then(result => {\n                  const directors = result.crew.filter(\n                    member => member.job === \"Director\"\n                  );\n                  this.setState(\n                    {\n                      actors: result.cast,\n                      directors,\n                      loading: false\n                    },\n                    () => {\n                      localStorage.setItem(\n                        `${this.props.match.params.movieId}`,\n                        JSON.stringify(this.state)\n                      );\n                    }\n                  );\n                });\n            }\n          );\n        }\n      })\n      .catch(error => console.log(\"Error:\", error));\n  };\n\n  render() {\n    return (\n      <div className=\"rmdb-movie\">\n        {this.state.movie ? (\n          <div>\n            <Navigation movie={this.state.movie.title} />\n            <MovieInfo\n              movie={this.state.movie}\n              directors={this.state.directors}\n            />\n            <MovieInfoBar\n              time={this.state.movie.runtime}\n              budget={this.state.movie.budget}\n              revenue={this.state.movie.revenue}\n            />\n          </div>\n        ) : null}\n        {this.state.actors ? (\n          <div className=\"rmdb-movie-grid\">\n            <FourColGrid header={\"Actors\"}>\n              {this.state.actors.map((element, i) => {\n                return <Actor key={i} actor={element} />;\n              })}\n            </FourColGrid>\n          </div>\n        ) : null}\n        {!this.state.actors && !this.state.loading ? (\n          <h1>No Movie Found</h1>\n        ) : null}\n        {this.state.loading ? <Spinner /> : null}\n      </div>\n    );\n  }\n}\n\nexport default Movie;\n"]},"metadata":{},"sourceType":"module"}